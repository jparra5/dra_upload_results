# NLS_MESSAGEFORMAT_NONE
# NLS_ENCODING=UTF-8
ExtName=Advanced Tester
ExtDesc=Run commands and upload results to DevOps Insights.
ExtMessage=Run commands and upload results to DevOps Insights.

COMMAND_KEY=Test Command:
COMMAND_DESC=The UNIX shell script to run for the tests. It is recommended that you specify your preferred shell as the first line, e.g. for Bash, use <code>#!/bin/bash</code>. Tip: If you prefer to keep your script in source control, you can simply invoke your script here, e.g. \
<br> \
<br> \
<code> \
  #!/bin/bash \
  <br> \
  source test.sh \
</code>


WORKING_DIRECTORY_KEY=Working Directory
WORKING_DIRECTORY_DESC=The directory where you want the test command to run. If you leave this field empty, the test command runs in the project's root directory.

FORMAT_SELECT_KEY=Format
ADDITIONAL_FORMAT_SELECT_KEY=Additional Format
FORMAT_SELECT_DESC=Select the format for the results file. The format must match the format selected when creating the criteria.
FORMAT_OPTION_1_KEY=None
FORMAT_OPTION_2_KEY=Mocha
FORMAT_OPTION_3_KEY=Jasmine
FORMAT_OPTION_4_KEY=Istanbul
FORMAT_OPTION_5_KEY=New Relic
FORMAT_OPTION_6_KEY=Github
FORMAT_OPTION_7_KEY=Sensu
FORMAT_OPTION_8_KEY=Uptime
FORMAT_OPTION_9_KEY=Slack
FORMAT_OPTION_10_KEY=Pagerduty
FORMAT_OPTION_11_KEY=Saucelabs
FORMAT_OPTION_12_KEY=xUnit
FORMAT_OPTION_13_KEY=BlanketJS
FORMAT_OPTION_14_KEY=Karma Mocha

LOG_FILE_KEY=Result File Location
ADDITIONAL_LOG_FILE_KEY=Additional Result File Location
LOG_FILE_DESC=The result file should contain results in the format specified in the policy. If a Working Directory has been defined, this path will be relative to that directory. \
<br> \
<br> \
For example, in a simple NodeJS project we have stored our source code in the <b>./src</b> directory, our tests in the <b>./test</b> directory, and our test results in the <b>./test/results</b> directory. If Working Directory is blank, the Result File Location for our mocha file would be <b>./test/results/mochaTestResults.json</b>. If the Working Directory field was set to <b>./test</b>, our Result File Location would just be <b>./results/mochaTestResults.json</b>. \
<br> \
<br> \
Patterns can also be used to specify multiple files. A wildcard (*) can be used with the pervious example: <b>./test/results/*.json</b>.


ENVIRONMENT_KEY=Environment Name
ENVIRONMENT_DESC=Specify name of environment (e.g. "dev", "QA", "Production") where commands were run. The Environment name entered here must match the Environment name in the DevOps Insights Gate.

APPLICATION_NAME_KEY=Application Name
APPLICATION_NAME_DESC=Please specify the logical name by which the application is referenced (e.g., Message Store, UI, etc.). You will use this application name when creating DevOps Insights Gate jobs.

MODULE_KEY=Module Name
MODULE_DESC=Name of the module to which this message belongs.

MICROSERVICE_KEY=Microservice Name
MICROSERVICE_DESC=Name of the microservice to which this message belongs.

LIFE_CYCLE_STAGE_SELECT_KEY=Type of Metric
ADDITIONAL_LIFE_CYCLE_STAGE_SELECT_KEY=Additional Type of Metric
LIFE_CYCLE_STAGE_SELECT_DESC=The Type of Metric must match the type selected when creating the policy. Code Coverage can only be used for Istanbul and BlanketJS Formats. Unit Test and Functional Verification Test can be used for Formats:  Mocha, xUnit, and Karma Mocha.
LIFE_CYCLE_STAGE_OPTION_1_KEY=Code Coverage
LIFE_CYCLE_STAGE_OPTION_2_KEY=Unit Test
LIFE_CYCLE_STAGE_OPTION_3_KEY=Smoke Test
LIFE_CYCLE_STAGE_OPTION_4_KEY=Functional Verification Test
LIFE_CYCLE_STAGE_OPTION_5_KEY=Monitoring
LIFE_CYCLE_STAGE_OPTION_6_KEY=Deploy
LIFE_CYCLE_STAGE_OPTION_7_KEY=Other Test
LIFE_CYCLE_STAGE_OPTION_8_KEY=Static Security Scan
LIFE_CYCLE_STAGE_OPTION_9_KEY=License Scan
LIFE_CYCLE_STAGE_OPTION_10_KEY=Performance Scan